import random

def d():
    global question1,select,d1,d2,d3,d4
    question1 = [
        "Which data structure uses LIFO (Last In, First Out) principle?",
        "Which of the following is a linear data structure?",
        "What is the worst-case time complexity of searching in a binary search tree (BST)?",
        "Which data structure is used for implementing recursion?",
        "Which of the following is an example of a non-linear data structure?",
        "Which data structure is best suited for implementing priority queues?",
        "Which of the following sorting algorithms has the best average-case time complexity?",
        "Which data structure can be used for implementing a circular queue?",
        "What is the height of a balanced binary search tree with N nodes?",
        "Which of the following is an application of a stack?",
        "What is the time complexity of inserting an element at the beginning of a linked list?",
        "Which of the following data structures allows O(1) time complexity for accessing an element?",
        "Which data structure is used in Depth First Search (DFS)?",
        "Which data structure is mainly used in Breadth First Search (BFS)?",
        "Which data structure allows duplicate elements?",
        "What is the time complexity of searching in a hash table in the best case?",
        "Which of the following data structures supports both FIFO and LIFO operations efficiently?",
        "Which tree traversal method processes nodes in the order: left subtree, root, right subtree?",
        "Which data structure is used for implementing undo functionality in text editors?",
        "Which type of graph traversal algorithm uses a queue?",
        
    # Arrays & Strings
    "What is the time complexity to access an element in an array using an index?",
    "Which sorting algorithm is NOT based on comparisons?",
    "Which data structure is used to implement recursion internally?",
    "What is the worst-case time complexity of QuickSort?",
    "Which algorithm is best suited for finding the smallest and largest elements in an unsorted array?",
    "What is the space complexity of Merge Sort?",
    "Which sorting algorithm is the best for nearly sorted arrays?",
    "What is the best case time complexity of Bubble Sort?",
    "Which sorting algorithm is not stable?",
    "Which data structure is best for implementing a LRU cache?",
    
    # Linked Lists
    "What is the time complexity of inserting a node at the head of a singly linked list?",
    "Which operation is more efficient in a linked list than an array?",
    "How do you detect a loop in a linked list?",
    "Which technique is used to remove a cycle in a linked list?",
    "What is the time complexity of searching an element in an unsorted singly linked list?",
    "Which linked list allows traversal in both directions?",
    "How do you check if a linked list is a palindrome?",
    "Which data structure is best suited for implementing undo functionality?",
    "Which of the following is a disadvantage of a singly linked list?",
    "Which linked list does not have a NULL value in any of its nodes?",

    # Stacks & Queues
    "Which data structure follows LIFO?",
    "Which data structure follows FIFO?",
    "Which function is used to insert an element in a stack?",
    "What is the time complexity of pop operation in a stack?",
    "Which stack operation returns the top element without removing it?",
    "Which data structure can be used to evaluate a postfix expression?",
    "Which type of queue allows insertion and deletion at both ends?",
    "What is the time complexity of inserting an element in a queue implemented using an array?",
    "Which type of queue is best suited for a CPU scheduling algorithm?",
    "Which data structure is used to implement a breadth-first search (BFS)?",

    # Trees
    "What is the height of a binary tree with N nodes in the worst case?",
    "Which tree follows the properties: left child < parent < right child?",
    "What is the inorder traversal of a binary search tree?",
    "Which traversal method is used in a depth-first search?",
    "What is the worst-case time complexity for searching in a BST?",
    "What is a complete binary tree?",
    "Which tree is always balanced and maintains O(log n) complexity for insertions?",
    "What is the number of leaves in a full binary tree with n internal nodes?",
    "Which traversal method is used for level order traversal?",
    "Which data structure is used to implement a priority queue?",

    # Graphs
    "Which data structure is used to represent graphs efficiently?",
    "Which algorithm is used to find the shortest path in an unweighted graph?",
    "What is the time complexity of DFS for a graph with V vertices and E edges?",
    "Which algorithm is used to find the shortest path in a weighted graph with negative edges?",
    "Which algorithm is used to detect cycles in a directed graph?",
    "What is the space complexity of an adjacency matrix representation?",
    "Which algorithm is used for finding a minimum spanning tree?",
    "Which traversal method is used in a breadth-first search?",
    "What is the degree of a vertex in an undirected graph?",
    "What is the maximum number of edges in a simple undirected graph with N vertices?",

    # Hashing
    "What is the average-case time complexity of searching in a hash table?",
    "What is a collision in hashing?",
    "Which method is used to handle collisions in hashing?",
    "Which hash function technique gives minimal collisions?",
    "What is the worst-case time complexity of searching in a hash table?",
    "Which hashing technique avoids collisions using linked lists?",
    "What is open addressing in hashing?",
    "What is the load factor in hashing?",
    "Which hashing technique uses two different hash functions?",
    "What is double hashing?",

    # Heap & Priority Queue
    "Which heap property must be satisfied in a min-heap?",
    "What is the time complexity of inserting an element in a binary heap?",
    "Which data structure is used to implement a priority queue?",
    "Which of the following is true for a binary heap?",
    "What is the worst-case time complexity of deleting an element from a binary heap?",
    "Which heap operation maintains the heap property?",
    "What is the time complexity of building a heap?",
    "Which traversal is used to represent a heap?",
    "Which is the most efficient heap-building algorithm?",
    "Which type of heap allows modification of priorities?",

    # Advanced Topics
    "Which data structure is used in a Trie?",
    "What is the worst-case time complexity of searching in a Trie?",
    "Which data structure is used in a suffix tree?",
    "What is a Fenwick tree used for?",
    "Which data structure is best suited for solving the longest common prefix problem?",
    "Which technique is used in disjoint set union-find?",
    "Which technique is used in the Kruskal’s algorithm?",
    "What is the purpose of Tarjan’s algorithm?",
    "Which data structure is used in KMP string matching?",
    "Which data structure optimally solves range minimum queries?"


    ]

    options1 = [
        ["A) Queue", "B) Stack", "C) Linked List", "D) Graph"],
        ["A) Graph", "B) Tree", "C) Queue", "D) Both C and D"],
        ["A) O(1)", "B) O(log N)", "C) O(N)", "D) O(N log N)"],
        ["A) Queue", "B) Stack", "C) Linked List", "D) Tree"],
        ["A) Stack", "B) Queue", "C) Array", "D) Graph"],
        ["A) Stack", "B) Queue", "C) Heap", "D) Linked List"],
        ["A) Quick Sort", "B) Merge Sort", "C) Heap Sort", "D) Bubble Sort"],
        ["A) Stack", "B) Linked List", "C) Deque", "D) Array"],
        ["A) O(N)", "B) O(log N)", "C) O(N log N)", "D) O(1)"],
        ["A) Function calls", "B) Expression evaluation", "C) Undo operation", "D) All of the above"],
        ["A) O(1)", "B) O(N)", "C) O(log N)", "D) O(N log N)"],
        ["A) Stack", "B) Queue", "C) Hash Table", "D) Linked List"],
        ["A) Stack", "B) Queue", "C) Heap", "D) Linked List"],
        ["A) Stack", "B) Queue", "C) Heap", "D) Tree"],
        ["A) Stack", "B) Queue", "C) Array", "D) Set"],
        ["A) O(1)", "B) O(N)", "C) O(log N)", "D) O(N log N)"],
        ["A) Queue", "B) Stack", "C) Deque", "D) Graph"],
        ["A) Preorder", "B) Postorder", "C) Inorder", "D) Level Order"],
        ["A) Queue", "B) Stack", "C) Heap", "D) Graph"],
        ["A) DFS", "B) BFS", "C) Dijkstra's Algorithm", "D) Prim's Algorithm"],
    ["O(n)", "O(log n)", "O(1)", "O(n²)"],  
    ["Merge Sort", "Quick Sort", "Counting Sort", "Heap Sort"],  
    ["Queue", "Stack", "Heap", "Array"],  
    ["O(n log n)", "O(n²)", "O(n)", "O(1)"],  
    ["Bubble Sort", "Selection Sort", "Linear Scan", "Quick Sort"],  
    ["O(1)", "O(n)", "O(log n)", "O(n log n)"],  
    ["Bubble Sort", "Quick Sort", "Insertion Sort", "Selection Sort"],  
    ["O(n)", "O(log n)", "O(1)", "O(n²)"],  
    ["Merge Sort", "Quick Sort", "Counting Sort", "Heap Sort"],  
    ["Stack", "Queue", "HashMap", "Linked List"],  
    ["O(1)", "O(n)", "O(log n)", "O(n log n)"],  
    ["Insertion", "Deletion", "Searching", "Traversal"],  
    ["Floyd’s Cycle Detection", "DFS", "BFS", "Binary Search"],  
    ["Fast and Slow Pointer", "Sorting", "Recursion", "Backtracking"],  
    ["O(1)", "O(n)", "O(log n)", "O(n²)"],  
    ["Singly Linked List", "Doubly Linked List", "Circular Linked List", "Skip List"],  
    ["Stack", "Queue", "HashMap", "Deque"],  
    ["Stack", "Queue", "Linked List", "Heap"],  
    ["O(1)", "O(n)", "O(log n)", "O(n log n)"],  
    ["Singly Linked List", "Doubly Linked List", "Circular Linked List", "Skip List"],  
    ["Stack", "Queue", "Heap", "Graph"],  
    ["Stack", "Queue", "Heap", "Tree"],  
    ["push()", "pop()", "top()", "enqueue()"],  
    ["O(1)", "O(n)", "O(log n)", "O(n log n)"],  
    ["push()", "pop()", "peek()", "enqueue()"],  
    ["Stack", "Queue", "Heap", "Graph"],  
    ["Deque", "Priority Queue", "Circular Queue", "Doubly Queue"],  
    ["O(1)", "O(n)", "O(log n)", "O(n log n)"],  
    ["Priority Queue", "FIFO Queue", "Circular Queue", "Doubly Queue"],  
    ["Stack", "Queue", "Heap", "Graph"],  
    ["O(n)", "O(log n)", "O(n²)", "O(1)"],  
    ["BST", "AVL Tree", "Red-Black Tree", "Heap"],  
    ["Preorder", "Inorder", "Postorder", "Level Order"],  
    ["DFS", "BFS", "Dijkstra", "Bellman-Ford"],  
    ["O(n)", "O(log n)", "O(n²)", "O(1)"],  
    ["Complete Binary Tree", "Full Binary Tree", "AVL Tree", "B-Tree"],  
    ["BST", "AVL Tree", "Red-Black Tree", "Heap"],  
    ["n", "n+1", "2n", "n-1"],  
    ["Preorder", "Inorder", "Postorder", "Level Order"],  
    ["Stack", "Queue", "Heap", "Graph"],  
    ["Adjacency Matrix", "Adjacency List", "Edge List", "Incidence Matrix"],  
    ["BFS", "DFS", "Dijkstra", "Floyd-Warshall"],  
    ["O(V+E)", "O(V log V)", "O(E log V)", "O(V²)"],  
    ["Dijkstra", "Bellman-Ford", "Floyd-Warshall", "Prim’s Algorithm"],  
    ["DFS", "BFS", "Kruskal’s", "Union-Find"],  
    ["O(V²)", "O(V+E)", "O(E log V)", "O(V log V)"],  
    ["Prim’s Algorithm", "Kruskal’s Algorithm", "Dijkstra", "Floyd-Warshall"],  
    ["DFS", "BFS", "Dijkstra", "Bellman-Ford"],  
    ["Degree", "Edge Count", "Adjacency", "Weight"],  
    ["N(N-1)/2", "N²", "2N", "N(N+1)/2"],  
    ["O(1)", "O(n)", "O(log n)", "O(n log n)"],  
    ["Collision", "Overflow", "Underflow", "Deadlock"],  
    ["Chaining", "Open Addressing", "Rehashing", "Linear Probing"],  
    ["Multiplication Hashing", "Division Hashing", "Folding Hashing", "Universal Hashing"],  
    ["O(1)", "O(n)", "O(log n)", "O(n log n)"],  
    ["Chaining", "Open Addressing", "Double Hashing", "Rehashing"],  
    ["Using another Hash Function", "Using Linked List", "Resizing Table", "Ignoring Collisions"],  
    ["Load Factor", "Rehashing Factor", "Density Factor", "Collision Factor"],  
    ["Linear Probing", "Double Hashing", "Quadratic Probing", "Rehashing"],  
    ["Linear Probing", "Double Hashing", "Quadratic Probing", "Chaining"],  
    ["Parent ≤ Child", "Parent ≥ Child", "Parent = Child", "No Condition"],  
    ["O(1)", "O(n)", "O(log n)", "O(n log n)"],  
    ["Stack", "Queue", "Heap", "Tree"],  
    ["Heap is complete", "Heap is balanced", "Heap is unordered", "Heap is binary"],  
    ["O(1)", "O(n)", "O(log n)", "O(n log n)"],  
    ["Heapify", "Delete", "Insert", "Sort"],  
    ["O(1)", "O(n)", "O(log n)", "O(n log n)"],  
    ["Preorder", "Inorder", "Postorder", "Level Order"],  
    ["Floyd’s Algorithm", "Heapify", "Kruskal’s Algorithm", "Merge Sort"],  
    ["Binary Heap", "Ternary Heap", "Fibonacci Heap", "Min Heap"],  
    ["Trie", "Suffix Tree", "Fenwick Tree", "Segment Tree"],  
    ["O(n)", "O(log n)", "O(n²)", "O(1)"],  
    ["Trie", "Suffix Tree", "Fenwick Tree", "Segment Tree"],  
    ["Range Queries", "String Matching", "Graph Traversal", "Sorting"],  
    ["Trie", "Suffix Tree", "Fenwick Tree", "Segment Tree"],  
    ["Path Compression", "Union by Rank", "DFS", "BFS"],  
    ["Greedy", "Dynamic Programming", "Divide & Conquer", "Brute Force"],  
    ["SCC Finding", "Shortest Path", "MST Finding", "Graph Traversal"],  
    ["KMP", "Rabin-Karp", "Boyer-Moore", "Naive Search"],  
    ["Sparse Table", "Segment Tree", "Binary Indexed Tree", "Fenwick Tree"]  


    ]

    # Select a random question
    select = random.randint(0, len(question1) - 1)

    # Get a shuffled list of options
    random.shuffle(options1[select])

    # Extract four options randomly (since they are already shuffled, just pick all)
    d1, d2, d3, d4 = options1[select]

d()
